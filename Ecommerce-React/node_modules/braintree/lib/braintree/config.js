class Config {
  constructor(rawConfig) {
    this.timeout = 60000;
    this.apiVersion = "6";
    this.graphQLApiVersion = "2018-09-10";
    this.customHttpAgent = rawConfig.customHttpAgent;
    const parser = new CredentialsParser();

    if (rawConfig.clientId || rawConfig.clientSecret) {
      parser.parseClientCredentials(rawConfig.clientId, rawConfig.clientSecret);
      this.clientId = parser.clientId;
      this.clientSecret = parser.clientSecret;
      this.environment = parser.environment;
    } else if (rawConfig.accessToken) {
      parser.parseAccessToken(rawConfig.accessToken);
      if (
        rawConfig.environment &&
        parser.environment !== rawConfig.environment
      ) {
        throw new Error(
          "AccessToken environment does not match environment passed in config"
        );
      }
      this.accessToken = parser.accessToken;
      this.environment = parser.environment;
      this.merchantId = parser.merchantId;
    } else {
      this.publicKey = rawConfig.publicKey;
      this.privateKey = rawConfig.privateKey;
      this.merchantId = rawConfig.merchantId || rawConfig.partnerId;
      this.environment = rawConfig.environment;
      if (!this.publicKey) {
        throw new Error("Missing publicKey");
      }
      if (!this.privateKey) {
        throw new Error("Missing privateKey");
      }
      if (!this.merchantId) {
        throw new Error("Missing merchantId");
      }
      if (!this.environment) {
        throw new Error("Missing environment");
      }
    }
  }

  // Rest of the class methods...
}

module.exports = { Config };


const config = new Config({
  publicKey: 'your_public_key_here',
  privateKey: 'your_private_key_here',
  merchantId: 'your_merchant_id_here',
  environment: 'your_environment_here'
});
